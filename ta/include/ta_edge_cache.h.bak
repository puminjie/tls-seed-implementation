/*
 * Copyright (c) 2014, Linaro Limited
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __TA_EDGE_CACHE_H__
#define __TA_EDGE_CACHE_H__

/* This UUID is generated with uuidgen
   the ITU-T UUID generator at http://www.itu.int/ITU-T/asn1/uuid.html */
/*
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
#define TA_EDGE_CACHE_UUID { 0x4e282c65, 0xee7c, 0x415e, \
		{ 0xb3, 0x85, 0xb3, 0xf7, 0xc4, 0x47, 0xde, 0xd6} }
#else
#define TA_EDGE_CACHE_UUID { 0x652c284e, 0x7cee, 0x5e41, \
		{ 0xb3, 0x85, 0xb3, 0xf7, 0xc4, 0x47, 0xde, 0xd6} }
#endif
*/

#define TA_EDGE_CACHE_UUID { 0x4e282c65, 0xee7c, 0x415e, \
		{ 0xb3, 0x85, 0xb3, 0xf7, 0xc4, 0x47, 0xde, 0xd6} }

/* The TAFs ID implemented in this TA */
#define TA_EDGE_CACHE_CMD_INIT          0 // initialize the managers of the EC.
#define TA_EDGE_CACHE_CMD_TLS           1 // execute the TLS operation
#define TA_EDGE_CACHE_CMD_SHUTDOWN      2 // shutdown the TLS context
#define TA_EDGE_CACHE_CMD_GET_DOMAIN    3 // load the domain list from the authority
#define TA_EDGE_CACHE_CMD_GET_CC        4 // load the CC from the origins
#define TA_EDGE_CACHE_CMD_GET_DATA      5 // load the data from the origins
#define TA_EDGE_CACHE_CMD_POLL_FETCH    6 // check whether there is any request for fetching
#define TA_EDGE_CACHE_CMD_POLL_DATA     7 // check whether the data fetching is finished
#define TA_EDGE_CACHE_CMD_TEST          8 // test command

/* Direction to the host application forwarder */
#define TA_EDGE_CACHE_NXT_NOTHING       128 // arg: none, alen: 0
#define TA_EDGE_CACHE_NXT_TLS_HANDSHAKE 129 // arg: none, alen: 0
#define TA_EDGE_CACHE_NXT_LOAD          130 
// arg: last bytes (4 bytes), length of path (2 bytes), file path, 
// alen: length of the file path + 6
#define TA_EDGE_CACHE_NXT_STORE         131 
// arg: last bytes (4 bytes, 0000), length of path (2 bytes), file path, sealed file, 
// alen: length of the file and the file path + 6
#define TA_EDGE_CACHE_NXT_EXIT          132 // arg: none, alen: 0
#define TA_EDGE_CACHE_NXT_GET_DOMAIN    133 // arg: address info, alen: length of address info
#define TA_EDGE_CACHE_NXT_GET_CC        134 // arg: address info, alen: length of address info
#define TA_EDGE_CACHE_NXT_FETCH_INIT    135 // arg: address info, alen: length of address info
#define TA_EDGE_CACHE_NXT_FETCH         136
#define TA_EDGE_CACHE_NXT_POLL_DATA     137
#define TA_EDGE_CACHE_NXT_POLL_FETCH    138

/* Report to the secure world */
#define TA_EDGE_CACHE_RPT_NOTHING       255
#define TA_EDGE_CACHE_RPT_LOAD          254 
// arg: the sealed file, alen: the length of the file
#define TA_EDGE_CACHE_RPT_STORE         253 
// arg: last bytes (4 bytes), length of path (2 bytes), file path, 
// alen: the length of the error code
#define TA_EDGE_CACHE_RPT_GET_DOMAIN    252 
// arg: none, alen: 0 notify the networking for getting the domain list (backend)
#define TA_EDGE_CACHE_RPT_GET_CC        251 
// arg: none, alen: 0 notify the networking for getting the CCs (backend)
#define TA_EDGE_CACHE_RPT_GET_DATA      250
// arg: none, alen: 0 notify the networking for getting the data (backend)
#define TA_EDGE_CACHE_RPT_POLL_DATA     249
// arg: none, alen: 0 wait for data fetching (frontend)
#define TA_EDGE_CACHE_RPT_POLL_FETCH    248
// arg: none, alen: 0 poll for data fetching (backend)

/* AES */
#define TA_AES_SIZE_128BIT      (128 / 8)
#define TA_AES_SIZE_256BIT      (256 / 8)

#define TA_AES_MODE_DECODE      0
#define TA_AES_MODE_ENCODE      1

/* ATTESTATION TA UUID & CMD */
#define TA_ATTESTATION_UUID { 0x3d5ba597, 0x924a, 0x4b57, \
    { 0x90, 0x23, 0x38, 0xe4, 0x49, 0x56, 0xc1, 0xb3} }

#define TA_ATTESTATION_CMD_GET_DIGEST 0

#endif /* __TA_EDGE_CACHE_H__ */
