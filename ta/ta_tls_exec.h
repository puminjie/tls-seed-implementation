#ifndef __TA_TLS_EXEC_H__
#define __TA_TLS_EXEC_H__

#include <inttypes.h>
#include <tee_internal_api.h>
#include <openssl/ssl.h>
#include <openssl/logs.h>
#include <string.h>

#include "ta_file_manager.h"
#include "ta_tls_table.h"
#include "ta_sio.h"

struct tls_manager_st;
static const unsigned char ca_buf[] =
{
0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E,
0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
0x54, 0x45, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x4D, 0x49,
0x49, 0x43, 0x6D, 0x7A, 0x43, 0x43, 0x41, 0x6B, 0x4B, 0x67,
0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x4A, 0x41, 0x49,
0x49, 0x65, 0x62, 0x64, 0x4F, 0x70, 0x6D, 0x77, 0x46, 0x6E,
0x4D, 0x41, 0x6F, 0x47, 0x43, 0x43, 0x71, 0x47, 0x53, 0x4D,
0x34, 0x39, 0x42, 0x41, 0x4D, 0x43, 0x4D, 0x49, 0x47, 0x47,
0x4D, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x56, 0x51,
0x51, 0x47, 0x0A, 0x45, 0x77, 0x4A, 0x4C, 0x55, 0x6A, 0x45,
0x4F, 0x4D, 0x41, 0x77, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43,
0x41, 0x77, 0x46, 0x55, 0x32, 0x56, 0x76, 0x64, 0x57, 0x77,
0x78, 0x44, 0x6A, 0x41, 0x4D, 0x42, 0x67, 0x4E, 0x56, 0x42,
0x41, 0x63, 0x4D, 0x42, 0x56, 0x4E, 0x6C, 0x62, 0x33, 0x56,
0x73, 0x4D, 0x52, 0x4D, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56,
0x51, 0x51, 0x4B, 0x44, 0x41, 0x70, 0x42, 0x0A, 0x62, 0x47,
0x6C, 0x6A, 0x5A, 0x53, 0x42, 0x4A, 0x62, 0x6D, 0x4D, 0x75,
0x4D, 0x51, 0x34, 0x77, 0x44, 0x41, 0x59, 0x44, 0x56, 0x51,
0x51, 0x4C, 0x44, 0x41, 0x56, 0x42, 0x62, 0x47, 0x6C, 0x6A,
0x5A, 0x54, 0x45, 0x56, 0x4D, 0x42, 0x4D, 0x47, 0x41, 0x31,
0x55, 0x45, 0x41, 0x77, 0x77, 0x4D, 0x59, 0x32, 0x45, 0x75,
0x59, 0x57, 0x78, 0x70, 0x59, 0x32, 0x55, 0x75, 0x59, 0x32,
0x39, 0x74, 0x0A, 0x4D, 0x52, 0x73, 0x77, 0x47, 0x51, 0x59,
0x4A, 0x4B, 0x6F, 0x5A, 0x49, 0x68, 0x76, 0x63, 0x4E, 0x41,
0x51, 0x6B, 0x42, 0x46, 0x67, 0x78, 0x6A, 0x59, 0x55, 0x42,
0x68, 0x62, 0x47, 0x6C, 0x6A, 0x5A, 0x53, 0x35, 0x6A, 0x62,
0x32, 0x30, 0x77, 0x48, 0x68, 0x63, 0x4E, 0x4D, 0x54, 0x67,
0x77, 0x4E, 0x7A, 0x49, 0x35, 0x4D, 0x54, 0x41, 0x30, 0x4F,
0x44, 0x51, 0x33, 0x57, 0x68, 0x63, 0x4E, 0x0A, 0x4D, 0x6A,
0x67, 0x77, 0x4E, 0x7A, 0x49, 0x32, 0x4D, 0x54, 0x41, 0x30,
0x4F, 0x44, 0x51, 0x33, 0x57, 0x6A, 0x43, 0x42, 0x68, 0x6A,
0x45, 0x4C, 0x4D, 0x41, 0x6B, 0x47, 0x41, 0x31, 0x55, 0x45,
0x42, 0x68, 0x4D, 0x43, 0x53, 0x31, 0x49, 0x78, 0x44, 0x6A,
0x41, 0x4D, 0x42, 0x67, 0x4E, 0x56, 0x42, 0x41, 0x67, 0x4D,
0x42, 0x56, 0x4E, 0x6C, 0x62, 0x33, 0x56, 0x73, 0x4D, 0x51,
0x34, 0x77, 0x0A, 0x44, 0x41, 0x59, 0x44, 0x56, 0x51, 0x51,
0x48, 0x44, 0x41, 0x56, 0x54, 0x5A, 0x57, 0x39, 0x31, 0x62,
0x44, 0x45, 0x54, 0x4D, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55,
0x45, 0x43, 0x67, 0x77, 0x4B, 0x51, 0x57, 0x78, 0x70, 0x59,
0x32, 0x55, 0x67, 0x53, 0x57, 0x35, 0x6A, 0x4C, 0x6A, 0x45,
0x4F, 0x4D, 0x41, 0x77, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43,
0x77, 0x77, 0x46, 0x51, 0x57, 0x78, 0x70, 0x0A, 0x59, 0x32,
0x55, 0x78, 0x46, 0x54, 0x41, 0x54, 0x42, 0x67, 0x4E, 0x56,
0x42, 0x41, 0x4D, 0x4D, 0x44, 0x47, 0x4E, 0x68, 0x4C, 0x6D,
0x46, 0x73, 0x61, 0x57, 0x4E, 0x6C, 0x4C, 0x6D, 0x4E, 0x76,
0x62, 0x54, 0x45, 0x62, 0x4D, 0x42, 0x6B, 0x47, 0x43, 0x53,
0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x4A,
0x41, 0x52, 0x59, 0x4D, 0x59, 0x32, 0x46, 0x41, 0x59, 0x57,
0x78, 0x70, 0x0A, 0x59, 0x32, 0x55, 0x75, 0x59, 0x32, 0x39,
0x74, 0x4D, 0x46, 0x6B, 0x77, 0x45, 0x77, 0x59, 0x48, 0x4B,
0x6F, 0x5A, 0x49, 0x7A, 0x6A, 0x30, 0x43, 0x41, 0x51, 0x59,
0x49, 0x4B, 0x6F, 0x5A, 0x49, 0x7A, 0x6A, 0x30, 0x44, 0x41,
0x51, 0x63, 0x44, 0x51, 0x67, 0x41, 0x45, 0x79, 0x54, 0x43,
0x68, 0x2F, 0x6A, 0x6E, 0x41, 0x69, 0x4F, 0x6A, 0x6C, 0x6F,
0x46, 0x36, 0x31, 0x42, 0x7A, 0x61, 0x6B, 0x0A, 0x7A, 0x46,
0x4F, 0x31, 0x38, 0x4B, 0x77, 0x30, 0x61, 0x35, 0x43, 0x51,
0x4F, 0x62, 0x43, 0x79, 0x67, 0x71, 0x61, 0x30, 0x6D, 0x77,
0x32, 0x31, 0x43, 0x41, 0x53, 0x68, 0x4C, 0x79, 0x78, 0x6B,
0x61, 0x65, 0x70, 0x77, 0x4F, 0x47, 0x43, 0x78, 0x6C, 0x36,
0x36, 0x50, 0x70, 0x73, 0x4A, 0x2B, 0x30, 0x33, 0x44, 0x66,
0x7A, 0x68, 0x64, 0x49, 0x62, 0x2B, 0x68, 0x30, 0x41, 0x58,
0x49, 0x45, 0x0A, 0x6A, 0x71, 0x4F, 0x42, 0x6C, 0x6A, 0x43,
0x42, 0x6B, 0x7A, 0x41, 0x64, 0x42, 0x67, 0x4E, 0x56, 0x48,
0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x2F, 0x45, 0x52,
0x7A, 0x30, 0x51, 0x77, 0x4C, 0x69, 0x43, 0x42, 0x6A, 0x38,
0x39, 0x61, 0x55, 0x42, 0x2F, 0x56, 0x2F, 0x34, 0x47, 0x4A,
0x5A, 0x37, 0x79, 0x34, 0x77, 0x48, 0x77, 0x59, 0x44, 0x56,
0x52, 0x30, 0x6A, 0x42, 0x42, 0x67, 0x77, 0x0A, 0x46, 0x6F,
0x41, 0x55, 0x2F, 0x45, 0x52, 0x7A, 0x30, 0x51, 0x77, 0x4C,
0x69, 0x43, 0x42, 0x6A, 0x38, 0x39, 0x61, 0x55, 0x42, 0x2F,
0x56, 0x2F, 0x34, 0x47, 0x4A, 0x5A, 0x37, 0x79, 0x34, 0x77,
0x4E, 0x67, 0x59, 0x49, 0x4B, 0x77, 0x59, 0x42, 0x42, 0x51,
0x55, 0x48, 0x41, 0x51, 0x45, 0x45, 0x4B, 0x6A, 0x41, 0x6F,
0x4D, 0x43, 0x59, 0x47, 0x43, 0x43, 0x73, 0x47, 0x41, 0x51,
0x55, 0x46, 0x0A, 0x42, 0x7A, 0x41, 0x42, 0x68, 0x68, 0x70,
0x6F, 0x64, 0x48, 0x52, 0x77, 0x4F, 0x69, 0x38, 0x76, 0x4D,
0x54, 0x51, 0x33, 0x4C, 0x6A, 0x51, 0x32, 0x4C, 0x6A, 0x49,
0x78, 0x4E, 0x53, 0x34, 0x78, 0x4E, 0x54, 0x49, 0x36, 0x4E,
0x54, 0x59, 0x33, 0x4F, 0x44, 0x41, 0x4D, 0x42, 0x67, 0x4E,
0x56, 0x48, 0x52, 0x4D, 0x45, 0x42, 0x54, 0x41, 0x44, 0x41,
0x51, 0x48, 0x2F, 0x4D, 0x41, 0x73, 0x47, 0x0A, 0x41, 0x31,
0x55, 0x64, 0x44, 0x77, 0x51, 0x45, 0x41, 0x77, 0x49, 0x42,
0x42, 0x6A, 0x41, 0x4B, 0x42, 0x67, 0x67, 0x71, 0x68, 0x6B,
0x6A, 0x4F, 0x50, 0x51, 0x51, 0x44, 0x41, 0x67, 0x4E, 0x48,
0x41, 0x44, 0x42, 0x45, 0x41, 0x69, 0x42, 0x4C, 0x78, 0x61,
0x74, 0x4F, 0x45, 0x55, 0x6C, 0x38, 0x63, 0x57, 0x6E, 0x4B,
0x35, 0x69, 0x69, 0x5A, 0x6C, 0x76, 0x47, 0x4F, 0x55, 0x61,
0x6B, 0x71, 0x0A, 0x58, 0x64, 0x70, 0x4A, 0x67, 0x36, 0x79,
0x2B, 0x7A, 0x4C, 0x65, 0x71, 0x51, 0x46, 0x6F, 0x34, 0x6C,
0x77, 0x49, 0x67, 0x42, 0x32, 0x42, 0x38, 0x5A, 0x65, 0x77,
0x59, 0x58, 0x67, 0x48, 0x78, 0x6A, 0x30, 0x6E, 0x70, 0x58,
0x75, 0x45, 0x34, 0x51, 0x59, 0x4C, 0x52, 0x7A, 0x6F, 0x7A,
0x34, 0x46, 0x45, 0x52, 0x6B, 0x50, 0x32, 0x46, 0x6A, 0x46,
0x79, 0x4C, 0x36, 0x52, 0x68, 0x77, 0x3D, 0x0A, 0x2D, 0x2D,
0x2D, 0x2D, 0x2D, 0x45, 0x4E, 0x44, 0x20, 0x43, 0x45, 0x52,
0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2D, 0x2D,
0x2D, 0x2D, 0x2D, 0x0A,
};

SSL_CTX *init_server_ctx(struct file_manager_st *mngr);
SSL_CTX *init_client_ctx(struct file_manager_st *mngr);
void free_ctx(SSL_CTX *ctx);
SSL *init_tls_server_context(struct tls_manager_st *mngr, log_t *time_log);
SSL *init_tls_client_context(struct tls_manager_st *mngr, log_t *time_log);
void free_tls_context(SSL *ssl);
TEE_Result tls_server_execution(struct tls_context_record_st *sctx, struct cmd_st *cctx, 
    struct tls_manager_st *mngr);
TEE_Result tls_client_execution(struct tls_context_record_st *sctx, struct cmd_st *cctx, 
    struct tls_manager_st *mngr);
struct io_status_ops *get_ops(uint8_t flag);
#endif /* __TA_TLS_EXEC_H__ */
